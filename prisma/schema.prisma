// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum JobStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Client {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String   @unique
  password               String
  phone                  String?
  address                String?
  emailVerified          Boolean  @default(false)
  emailVerificationToken String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  jobs                   Job[]
}

model Tradesperson {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String                @unique
  password               String
  phone                  String?
  businessName           String?
  businessAddress        String?
  emailVerified          Boolean               @default(false)
  emailVerificationToken String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  qualifications         Qualification[]
  tradespersonServices   TradespersonService[]
  tradespersonBadges     TradespersonBadge[]
  bids                   Bid[]
  assignedJobs           Job[]
  description            String?
  businessType           String?
  businessWebsite        String?
  availability           String?
  profileImageUrl        String?
  reviews                Review[]
  averageRating          Float?
  reviewCount            Int?
}

model Service {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  parentId             String?               @db.ObjectId
  parent               Service?              @relation(fields: [parentId], references: [id], name: "ServiceToService", onDelete: NoAction, onUpdate: NoAction)
  jobs                 Job[]
  tradespersonServices TradespersonService[]

  Service Service[] @relation(name: "ServiceToService")
}

model Job {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  clientId     String        @db.ObjectId
  client       Client        @relation(fields: [clientId], references: [id])
  serviceId    String        @db.ObjectId
  service      Service       @relation(fields: [serviceId], references: [id])
  description  String
  location     String
  budget       Float?
  status       JobStatus     @default(OPEN)
  assignedToId String?       @db.ObjectId
  assignedTo   Tradesperson? @relation(fields: [assignedToId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bids         Bid[]
  review       Review?
}

model Bid {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  jobId          String       @db.ObjectId
  job            Job          @relation(fields: [jobId], references: [id])
  tradespersonId String       @db.ObjectId
  tradesperson   Tradesperson @relation(fields: [tradespersonId], references: [id])
  amount         Float
  message        String
  createdAt      DateTime     @default(now())
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId          String        @unique @db.ObjectId
  job            Job           @relation(fields: [jobId], references: [id])
  tradespersonId String        @db.ObjectId
  tradesperson   Tradesperson  @relation(fields: [tradespersonId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model QualificationType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  Qualification Qualification[]

  TrustBadge TrustBadge[]
}

model Qualification {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  qualificationTypeId String            @db.ObjectId
  qualificationType   QualificationType @relation(fields: [qualificationTypeId], references: [id])
  tradespersonId      String            @db.ObjectId
  tradesperson        Tradesperson      @relation(fields: [tradespersonId], references: [id])
  issuingAuthority    String?
  dateIssued          DateTime?
  expiryDate          DateTime?
  verified            Boolean
}

model TradespersonService {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  tradespersonId String       @db.ObjectId
  tradesperson   Tradesperson @relation(fields: [tradespersonId], references: [id])
  serviceId      String       @db.ObjectId
  service        Service      @relation(fields: [serviceId], references: [id])

  @@unique([tradespersonId, serviceId])
}

model TrustBadge {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String
  requiredQualificationId String?             @db.ObjectId
  requiredQualification   QualificationType?  @relation(fields: [requiredQualificationId], references: [id])
  requiredReviewScore     Int?
  tradespersonBadges      TradespersonBadge[]
}

model TradespersonBadge {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  tradespersonId    String       @db.ObjectId
  tradesperson      Tradesperson @relation(fields: [tradespersonId], references: [id])
  trustBadgeId      String       @db.ObjectId
  trustBadge        TrustBadge   @relation(fields: [trustBadgeId], references: [id])
  earnedAt          DateTime     @default(now())
  verified          Boolean      @default(false)
  verificationNotes String?
}
